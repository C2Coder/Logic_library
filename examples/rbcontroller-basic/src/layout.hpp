// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by https://roboticsbrno.github.io/Esp32-RBGridUI-Designer/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":28424,"type":"Checkbox","state":{"id":"Display","x":0,"y":3,"w":12,"h":10,"css":{},"fontSize":14,"checked":false,"color":"#ff0606","text":""}},{"uuid":46691,"type":"Slider","state":{"id":"Intensity","x":0,"y":1.5,"w":12,"h":1,"css":{},"color":"#ff8c00","fontSize":16,"min":0,"max":255,"value":30,"precision":1,"showValue":true}},{"uuid":36788,"type":"Button","state":{"id":"Buzzer","x":4.5,"y":15,"w":3,"h":1,"css":{},"text":"Buzzer","fontSize":12,"color":"#000000","background":"","align":"center","valign":"center"}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x040000,
    "Your RBGridUi library version is too low for this layout, please update to 040000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        Display(
            UI.checkbox(0, 3, 12, 10, 28424)
                .color("#ff0606")
                .text("")
        ),
        Intensity(
            UI.slider(0, 1.5, 12, 1, 46691)
                .color("#ff8c00")
                .max(255)
                .value(30)
        ),
        Buzzer(
            UI.button(4.5, 15, 3, 1, 36788)
                .text("Buzzer")
        )
    {
    }

public:
    void commit();

    Checkbox& Display;
    Slider& Intensity;
    Button& Buzzer;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    Checkbox Display;
    Slider Intensity;
    Button Buzzer;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.Display = Display.finish();
    Layout.Intensity = Intensity.finish();
    Layout.Buzzer = Buzzer.finish();
    UI.commit();
}

};

};
